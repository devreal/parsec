extern "C" %{

/**
 * This example shows how to create a chain that creates a data and makes it
 * circulate from one task to another
 *    private variables
 *    guarded calls, RW
 *    dague_arena_construct()
 *
 */

#include <dague.h>
#include <dague/data_distribution.h>
#include <dague/datatype.h>

%}

/**
 * The JDF file can contains globals that will be variables global to all tasks.
 * These are not global variables to the whole code, but only to the scope of
 * the instantiated handle, so multiple instances of the same algorithm will
 * have different values.
 */
NB   [ type="int" ]

Task(k)

k = 0 .. NB

: taskdist( k )

/**
 * Let's ask the engine to create a data that will circulate from the first task
 * to the last one.
 */
RW  A <- (k == 0) ? NEW : A Task( k-1 )
      -> (k < NB) ? A Task( k+1 )

BODY
{
    int *Aint = (int*)A;

    if ( k == 0 ) {
        *Aint = 0;
    } else {
        *Aint += 1;
    }

    printf("I am element %d in the chain\n", *Aint );
}
END

extern "C" %{

static uint32_t
rank_of(dague_ddesc_t *desc, ...)
{
    (void)desc;
    return 0;
}

static int32_t
vpid_of(dague_ddesc_t *desc, ...)
{
    (void)desc;
    return 0;
}

int main(int argc, char *argv[])
{
    dague_context_t* dague;
    int rank, world;
    dague_ddesc_t taskdist;
    dague_Ex02_Chain_handle_t *handle;

#if defined(DAGUE_HAVE_MPI)
    {
        int provided;
        MPI_Init_thread(&argc, &argv, MPI_THREAD_SERIALIZED, &provided);
    }
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#else
    world = 1;
    rank = 0;
#endif

    dague = dague_init(-1, &argc, &argv);

    dague_ddesc_init(&taskdist, world, rank);
    taskdist.rank_of = rank_of;
    taskdist.vpid_of = vpid_of;

    handle = dague_Ex02_Chain_new(&taskdist, 10);

    /**
     * Since we create a data on the fly, we need to tell the runtime the
     * datatype of the DEFAULT type, so it can allocate the required memory
     * space.
     */
    dague_arena_construct(handle->arenas[DAGUE_Ex02_Chain_DEFAULT_ARENA],
                          sizeof(int), DAGUE_ARENA_ALIGNMENT_SSE,
                          dague_datatype_int_t );

    dague_enqueue( dague, (dague_handle_t*)handle );
    dague_context_wait(dague);

    dague_handle_free((dague_handle_t*)handle);
    dague_ddesc_destroy(&taskdist);

    dague_fini(&dague);
#if defined(DAGUE_HAVE_MPI)
    MPI_Finalize();
#endif

    return 0;
}

%}
