extern "C" %{
#include "tree_dist.h"
#include "parsec/sys/atomic.h"

struct __parsec_walk_internal_taskpool_s;
struct __parsec_walk_UP_assignment_s;
struct __parsec_walk_DOWN_assignment_s;
struct __parsec_walk_DO_DOWN_assignment_s;
struct __parsec_walk_DOWN_task_s;

static parsec_key_t up_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as);
static parsec_key_t down_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as);
static parsec_key_t do_down_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as);
static uint32_t undetermined_nb_tasks(struct __parsec_walk_internal_taskpool_s *__tp);

static int my_walk_startup(parsec_execution_stream_t * es,
                           struct __parsec_walk_DOWN_task_s * this_task);
#include "walk_utils.h"
%}

%option nb_local_tasks_fn = undetermined_nb_tasks

// These are global variables that are instanciated in the main.c
tree               [type = "tree_dist_t *"]
// The only type known to parsec is parsec_data_collection_t
NP                 [type = "int"]
fakeDesc           [type = "parsec_data_collection_t *"]
on_fct_param       [type = "void*"]
on_node_down       [type = "walk_fn_t"]
on_node_up         [type = "walk_fn_t"]
verbose            [type = "int"]

BCAST_UP(rank)
  rank = 0 .. (NP-1)

:fakeDesc(rank, rank)

CTL RL <- RL UP(0, 0)

BODY
{
    __parsec_tp->super.super.tdm.module->taskpool_set_nb_tasks(&__parsec_tp->super.super, 0); /** We are now DONE ! **/
    if( verbose ) {
        fprintf(stderr, "Rank %d in BCAST_UP\n", rank);
    }
}
END

// UP is used to go back up in thre tree.
// The algorithm is the following :
// 1- The parent of leaf nodes is expecting control messages from the task DOWN
// 2- Once it receives these messages, it sends a control message to its parent task
// 3- The parent of parent node receives the controls from UP
// 4- Once the root node receives both its children controls, the tree
//    is built and all the remaining tasks are killed

UP (n, l) [make_key_fn = up_make_key]
n = 0 .. 31
l = 0 .. 1<<n

:tree(n, l)

 // The controls (CTL) are used as counters. Each UP task
 // has to receive exactly two controls. But, the parent of leaf nodes
 // should receive the CTL from the DOWN tasks and all the other
 // parent nodes receive them from UP. Thus, it is not
 // possible to write a condition which explicitely says from which
 // task the control was received (in other words, we cannot know if
 // the child nodes are leaves or node without more information).
 // Fortunately, we know exactly how many controls a task is waiting (2)
 // and the runtime does not check the id of the task sending the controls,
 // instead, it just counts the number of controls.

CTL LEFT  <- 1 ? RL UP(n+1, 2*l) : RL DOWN(n+1, 2*l)
 // The line above says that the left control is received from
 // the left control of the task up(lid) if true.
 // For the runtime, this just means that a control has to be received

CTL RIGHT <- 1 ? RL UP(n+1, 2*l+1) : RL DOWN(n+1, 2*l+1)

//Once both controls are received, this task sends the control
// to its parent on the right or on the left control of its parent
// depending on its n and its l
CTL RL    -> (((l%2) == 0) & (n>0)) ? LEFT UP(n-1, l/2)
          -> (((l%2) == 1) & (n>0)) ? RIGHT UP(n-1, l/2)
          -> (n==0) ? RL BCAST_UP(0 .. (NP-1))

READ NODE <- NODE DO_DOWN(n, l)
     
BODY
{
    /* The root node has to delete all remaining tasks*/
    node_t *node = (node_t*)NODE;
    if( verbose ) {
        int rank = (((parsec_data_collection_t*)__parsec_tp->super._g_tree)->rank_of((parsec_data_collection_t*)__parsec_tp->super._g_tree, n, l));
        fprintf(stderr, "CALLING UP(%d, %d) on rank %d\n", n, l, rank);
    }
    if( NULL != on_node_up ) {
        on_node_up(tree, node, n, l, on_fct_param);
    }
}
END

// The algorithms of the project task is the following :
// 1- The root task :
//    a- It is automatically inserted in the tree
//    b- It creates it's children node
//    c- It sends the pointer of the created left node (NODEL) and right
//    node (NODER) to it's children
// 2- The children node :
//    a- A child node receives the pointer to its node from its father
//    (received in NODEB)
//    b- If it's error is less than the threshold, it update's its s
//       value (nodeb -> s) and sends the info to its father with the task
//       UP
//    c- Otherwise, it creates its children and send the node pointer
//       (just like the root)

DOWN (n, l) [make_key_fn = down_make_key
             nb_local_tasks_fn = undetermined_nb_tasks
             startup_fn = my_walk_startup ]
  n = 0 .. 31
  l = 0 .. (1<<n)
  node_exists = 1

:tree(n, l)

// If the err <= thresh, then the control is send to the parent
// node either on its left or its right to stop the node creation
CTL RL      <- (n > 0) ? RL DOWN(n-1, l/2)
            -> node_exists ? RL DOWN(n+1, 2*l)
            -> node_exists ? RL DOWN(n+1, 2*l+1)
            -> node_exists ? RL DO_DOWN(n, l)
    -> ((!node_exists) & ( (l%2) == 0 )) ? LEFT UP(n-1, l/2)
    -> ((!node_exists) & ( (l%2) == 1 )) ? RIGHT UP(n-1, l/2)

BODY
{
    if( verbose ) {
        int rank = (((parsec_data_collection_t*)__parsec_tp->super._g_tree)->rank_of((parsec_data_collection_t*)__parsec_tp->super._g_tree, n, l));
        fprintf(stderr, "CALLING DOWN(%d, %d) on rank %d\n", n, l, rank);
    }

    if( !tree_dist_has_node(tree, n, l) ) {
        if( verbose ) {
            int rank = (((parsec_data_collection_t*)__parsec_tp->super._g_tree)->rank_of((parsec_data_collection_t*)__parsec_tp->super._g_tree, n, l));
            fprintf(stderr, "Node (%d, %d) does not exist on rank %d\n", n, l, rank);
        }
        this_task->locals.node_exists.value = 0;
    }
}
END

DO_DOWN (n, l) [make_key_fn = do_down_make_key
                nb_local_tasks_fn = undetermined_nb_tasks]
  n = 0 .. 31
  l = 0 .. (1<<n)

:tree(n, l)

CTL RL    <- RL DOWN(n, l)
READ NODE <- tree(n, l)
          -> NODE UP(n, l)

BODY
{
    node_t *node = (node_t*)NODE;
    if( verbose ) {
        int rank = (((parsec_data_collection_t*)__parsec_tp->super._g_tree)->rank_of((parsec_data_collection_t*)__parsec_tp->super._g_tree, n, l));
        fprintf(stderr, "CALLING DO_DOWN(%d, %d) on rank %d\n", n, l, rank);
    }

    if( NULL != on_node_down ) {
        on_node_down(tree, node, n, l, on_fct_param);
    }
}
END

extern "C" %{
static uint64_t my_simple_tree_hash(int n, int l)
{
    return (((uint64_t)n) << 32) | ((uint64_t)l);
}

static parsec_key_t up_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as)
{
    const struct __parsec_walk_UP_assignment_s * assignments = (const struct __parsec_walk_UP_assignment_s *)_as;
    (void)__tp;
    return (parsec_key_t)my_simple_tree_hash(assignments->n.value, assignments->l.value);
}

static parsec_key_t down_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as)
{
    const struct __parsec_walk_DOWN_assignment_s * assignments = (const struct __parsec_walk_DOWN_assignment_s *)_as;
    (void)__tp;
    return (parsec_key_t)my_simple_tree_hash(assignments->n.value, assignments->l.value);
}

static parsec_key_t do_down_make_key(const parsec_taskpool_t* __tp, const parsec_assignment_t *_as)
{
    const struct __parsec_walk_DO_DOWN_assignment_s * assignments = (struct __parsec_walk_DO_DOWN_assignment_s *)_as;
    (void)__tp;
    return (parsec_key_t)my_simple_tree_hash(assignments->n.value, assignments->l.value);
}

static uint32_t undetermined_nb_tasks(struct __parsec_walk_internal_taskpool_s *__tp)
{
    (void)__tp;
    return PARSEC_UNDETERMINED_NB_TASKS;
}

static int my_walk_startup(parsec_execution_stream_t * es, __parsec_walk_DOWN_task_t * this_task)
{
  __parsec_walk_DOWN_task_t *new_task;
  __parsec_walk_internal_taskpool_t *__tp = (__parsec_walk_internal_taskpool_t *) this_task->taskpool;
  int vpid = 0;
  parsec_context_t *context = __tp->super.super.context;

  if ( ((parsec_data_collection_t *)__tp->super._g_tree)->myrank != 0)
      return PARSEC_HOOK_RETURN_DONE;
  if (NULL != ((parsec_data_collection_t *) __tp->super._g_tree)->vpid_of) {
      vpid = ((parsec_data_collection_t *) __tp->super._g_tree)->vpid_of((parsec_data_collection_t *) __tp->super._g_tree, 0, 0);
      (void)vpid;
      assert(context->nb_vp >= vpid);
  }
  new_task = (__parsec_walk_DOWN_task_t *) parsec_thread_mempool_allocate(context->virtual_processes[0]->execution_streams[0]->context_mempool);
  new_task->status = PARSEC_TASK_STATUS_NONE;
  new_task->taskpool = this_task->taskpool;
  new_task->task_class = __tp->super.super.task_classes_array[walk_DOWN.task_class_id];
  new_task->chore_id = 0;

  new_task->locals.n.value = 0;
  new_task->locals.l.value = 0;
  new_task->locals.node_exists.value = 1;

  new_task->data._f_RL.data_repo = NULL;
  new_task->data._f_RL.data_in = NULL;
  new_task->data._f_RL.data_out = NULL;

  new_task->priority = 1;

  PARSEC_LIST_ITEM_SINGLETON(new_task);
  __parsec_schedule(es, (parsec_task_t *)new_task, 0);
  return PARSEC_HOOK_RETURN_DONE;
}

%}
